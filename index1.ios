/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 */
'use strict';

var React = require('react-native');
var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  Navigator
} = React;

class LangBoWordBook3 extends React.Component {
    render() {
        return (
            <Navigator
                initialRoute={{name: 'WelcomeView', component: WelcomeView}}
                configureScene={() => {
                    return Navigator.SceneConfigs.FloatFromRight;
                }}
                renderScene={(route, navigator) => {
                    // count the number of func calls
                    console.log(route, navigator);

                    if (route.component) {
                        return React.createElement(route.component, { navigator });
                    }
                }}
             />
        );
    }
}

class FeedView extends React.Component {
    render() {
        return (
            <View style={styles.container}>
                <Text>
                    Feed View!
                </Text>
            </View>
        );
    }
}

class WelcomeView extends React.Component {
    onPressFeed() {
        this.props.navigator.push({
            name: 'FeedView',
            component: FeedView
        });
    }

    render() {
        return (
            <View style={styles.container}>
                <Text style={styles.welcome}>
                    Welcome View!
                </Text>

                <Text onPress={this.onPressFeed.bind(this)}>
                    Go to feed!
                </Text>
            </View>
        );
    }
}

var styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('LangBoWordBook3', () => LangBoWordBook3);


login(userName, userPwd) {
  co(function* () {
    let localUser = yield AsyncStorage.getItem(skey_local_user);

    if (localUser != null) {
      localUser = JSON.parse(localUser);
      if ((localUser.name === userName) && (localUser.pwd === userPwd)) {
        this.uid = localUser.id;
        return true;
      }
    }
    //validate user by server response
    let res = yield agent
      .post(url_user_login)
      .send(JSON.stringify({ userName: userName, userPwd: userPwd }))
      .set('Content-Type', 'application/json')
      .end();

    let loginResult = res.result;
    if (loginResult.substr(0, 4) === 'FAIL') {
      return '账号名或者密码错误';
    }
    //Persistent to local
    let userID = loginResult.substr(4, 9);
    yield AsyncStorage.setItem(skey_local_user, JSON.stringify({ name: userName, pwd: userPwd, id: userID }));
    return userID;
  }).then(function (val) {
    return val;
  }, function (err) {
    console.error(err.stack);
    console.log(err);
    return '无法连接服务器或登录失败';
  });
}
